!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):(e=e||self).Util=t(e.jQuery)}(this,function(o){"use strict";o=o&&o.hasOwnProperty("default")?o.default:o;var t="transitionend";function e(e){var t=this,n=!1;return o(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(t)},e),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var n=e.getAttribute("href");t=n&&"#"!==n?n.trim():""}try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=o(e).css("transition-duration"),n=o(e).css("transition-delay"),r=parseFloat(t),i=parseFloat(n);return r||i?(t=t.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(t)+parseFloat(n))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){o(e).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=t[r],a=o&&l.isElement(o)?"element":(s=o,{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(a))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+i+'".')}var s},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"!=typeof e.getRootNode)return e instanceof ShadowRoot?e:e.parentNode?l.findShadowRoot(e.parentNode):null;var t=e.getRootNode();return t instanceof ShadowRoot?t:null}};return o.fn.emulateTransitionEnd=e,o.event.special[l.TRANSITION_END]={bindType:t,delegateType:t,handle:function(e){if(o(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},l}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):(e=e||self).Collapse=t(e.jQuery,e.Util)}(this,function(l,u){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}l=l&&l.hasOwnProperty("default")?l.default:l,u=u&&u.hasOwnProperty("default")?u.default:u;var t="collapse",c="bs.collapse",e="."+c,n=l.fn[t],o={toggle:!0,parent:""},a={toggle:"boolean",parent:"(string|element)"},f={SHOW:"show"+e,SHOWN:"shown"+e,HIDE:"hide"+e,HIDDEN:"hidden"+e,CLICK_DATA_API:"click"+e+".data-api"},h="show",d="collapse",g="collapsing",p="collapsed",m="width",_="height",y=".show, .collapsing",v='[data-toggle="collapse"]',s=function(){function s(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(v)),r=0,i=n.length;r<i;r++){var o=n[r],a=u.getSelectorFromElement(o),s=[].slice.call(document.querySelectorAll(a)).filter(function(e){return e===t});null!==a&&0<s.length&&(this._selector=a,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e=s.prototype;return e.toggle=function(){l(this._element).hasClass(h)?this.hide():this.show()},e.show=function(){var e,t,n=this;if(!this._isTransitioning&&!l(this._element).hasClass(h)&&(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(y)).filter(function(e){return"string"==typeof n._config.parent?e.getAttribute("data-parent")===n._config.parent:e.classList.contains(d)})).length&&(e=null),!(e&&(t=l(e).not(this._selector).data(c))&&t._isTransitioning))){var r=l.Event(f.SHOW);if(l(this._element).trigger(r),!r.isDefaultPrevented()){e&&(s._jQueryInterface.call(l(e).not(this._selector),"hide"),t||l(e).data(c,null));var i=this._getDimension();l(this._element).removeClass(d).addClass(g),this._element.style[i]=0,this._triggerArray.length&&l(this._triggerArray).removeClass(p).attr("aria-expanded",!0),this.setTransitioning(!0);var o="scroll"+(i[0].toUpperCase()+i.slice(1)),a=u.getTransitionDurationFromElement(this._element);l(this._element).one(u.TRANSITION_END,function(){l(n._element).removeClass(g).addClass(d).addClass(h),n._element.style[i]="",n.setTransitioning(!1),l(n._element).trigger(f.SHOWN)}).emulateTransitionEnd(a),this._element.style[i]=this._element[o]+"px"}}},e.hide=function(){var e=this;if(!this._isTransitioning&&l(this._element).hasClass(h)){var t=l.Event(f.HIDE);if(l(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",u.reflow(this._element),l(this._element).addClass(g).removeClass(d).removeClass(h);var r=this._triggerArray.length;if(0<r)for(var i=0;i<r;i++){var o=this._triggerArray[i],a=u.getSelectorFromElement(o);if(null!==a)l([].slice.call(document.querySelectorAll(a))).hasClass(h)||l(o).addClass(p).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[n]="";var s=u.getTransitionDurationFromElement(this._element);l(this._element).one(u.TRANSITION_END,function(){e.setTransitioning(!1),l(e._element).removeClass(g).addClass(d).trigger(f.HIDDEN)}).emulateTransitionEnd(s)}}},e.setTransitioning=function(e){this._isTransitioning=e},e.dispose=function(){l.removeData(this._element,c),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},e._getConfig=function(e){return(e=i({},o,e)).toggle=Boolean(e.toggle),u.typeCheckConfig(t,e,a),e},e._getDimension=function(){return l(this._element).hasClass(m)?m:_},e._getParent=function(){var e,n=this;u.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var t='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',r=[].slice.call(e.querySelectorAll(t));return l(r).each(function(e,t){n._addAriaAndCollapsedClass(s._getTargetFromElement(t),[t])}),e},e._addAriaAndCollapsedClass=function(e,t){var n=l(e).hasClass(h);t.length&&l(t).toggleClass(p,!n).attr("aria-expanded",n)},s._getTargetFromElement=function(e){var t=u.getSelectorFromElement(e);return t?document.querySelector(t):null},s._jQueryInterface=function(r){return this.each(function(){var e=l(this),t=e.data(c),n=i({},o,e.data(),"object"==typeof r&&r?r:{});if(!t&&n.toggle&&/show|hide/.test(r)&&(n.toggle=!1),t||(t=new s(this,n),e.data(c,t)),"string"==typeof r){if(void 0===t[r])throw new TypeError('No method named "'+r+'"');t[r]()}})},function(e,t,n){t&&r(e.prototype,t),n&&r(e,n)}(s,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return o}}]),s}();return l(document).on(f.CLICK_DATA_API,v,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=l(this),t=u.getSelectorFromElement(this),r=[].slice.call(document.querySelectorAll(t));l(r).each(function(){var e=l(this),t=e.data(c)?"toggle":n.data();s._jQueryInterface.call(e,t)})}),l.fn[t]=s._jQueryInterface,l.fn[t].Constructor=s,l.fn[t].noConflict=function(){return l.fn[t]=n,s._jQueryInterface},s}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],t):(e=e||self).Dropdown=t(e.jQuery,e.Popper,e.Util)}(this,function(c,o,a){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}c=c&&c.hasOwnProperty("default")?c.default:c,o=o&&o.hasOwnProperty("default")?o.default:o,a=a&&a.hasOwnProperty("default")?a.default:a;var t="dropdown",f="bs.dropdown",i="."+f,e=".data-api",s=c.fn[t],l=new RegExp("38|40|27"),h={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,CLICK:"click"+i,CLICK_DATA_API:"click"+i+e,KEYDOWN_DATA_API:"keydown"+i+e,KEYUP_DATA_API:"keyup"+i+e},d="disabled",g="show",p="dropup",m="dropright",_="dropleft",y="dropdown-menu-right",v="position-static",C='[data-toggle="dropdown"]',u=".dropdown form",E=".dropdown-menu",b=".navbar-nav",w=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",A="top-start",D="top-end",T="bottom-start",P="bottom-end",I="right-start",O="left-start",S={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},j={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},N=function(){function u(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e=u.prototype;return e.toggle=function(){if(!this._element.disabled&&!c(this._element).hasClass(d)){var e=u._getParentFromElement(this._element),t=c(this._menu).hasClass(g);if(u._clearMenus(),!t){var n={relatedTarget:this._element},r=c.Event(h.SHOW,n);if(c(e).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar){if(void 0===o)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var i=this._element;"parent"===this._config.reference?i=e:a.isElement(this._config.reference)&&(i=this._config.reference,void 0!==this._config.reference.jquery&&(i=this._config.reference[0])),"scrollParent"!==this._config.boundary&&c(e).addClass(v),this._popper=new o(i,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===c(e).closest(b).length&&c(document.body).children().on("mouseover",null,c.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),c(this._menu).toggleClass(g),c(e).toggleClass(g).trigger(c.Event(h.SHOWN,n))}}}},e.show=function(){if(!(this._element.disabled||c(this._element).hasClass(d)||c(this._menu).hasClass(g))){var e={relatedTarget:this._element},t=c.Event(h.SHOW,e),n=u._getParentFromElement(this._element);c(n).trigger(t),t.isDefaultPrevented()||(c(this._menu).toggleClass(g),c(n).toggleClass(g).trigger(c.Event(h.SHOWN,e)))}},e.hide=function(){if(!this._element.disabled&&!c(this._element).hasClass(d)&&c(this._menu).hasClass(g)){var e={relatedTarget:this._element},t=c.Event(h.HIDE,e),n=u._getParentFromElement(this._element);c(n).trigger(t),t.isDefaultPrevented()||(c(this._menu).toggleClass(g),c(n).toggleClass(g).trigger(c.Event(h.HIDDEN,e)))}},e.dispose=function(){c.removeData(this._element,f),c(this._element).off(i),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},e.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},e._addEventListeners=function(){var t=this;c(this._element).on(h.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},e._getConfig=function(e){return e=n({},this.constructor.Default,c(this._element).data(),e),a.typeCheckConfig(t,e,this.constructor.DefaultType),e},e._getMenuElement=function(){if(!this._menu){var e=u._getParentFromElement(this._element);e&&(this._menu=e.querySelector(E))}return this._menu},e._getPlacement=function(){var e=c(this._element.parentNode),t=T;return e.hasClass(p)?(t=A,c(this._menu).hasClass(y)&&(t=D)):e.hasClass(m)?t=I:e.hasClass(_)?t=O:c(this._menu).hasClass(y)&&(t=P),t},e._detectNavbar=function(){return 0<c(this._element).closest(".navbar").length},e._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=n({},e.offsets,t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},e._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),e},u._jQueryInterface=function(t){return this.each(function(){var e=c(this).data(f);if(e||(e=new u(this,"object"==typeof t?t:null),c(this).data(f,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},u._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var t=[].slice.call(document.querySelectorAll(C)),n=0,r=t.length;n<r;n++){var i=u._getParentFromElement(t[n]),o=c(t[n]).data(f),a={relatedTarget:t[n]};if(e&&"click"===e.type&&(a.clickEvent=e),o){var s=o._menu;if(c(i).hasClass(g)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&c.contains(i,e.target))){var l=c.Event(h.HIDE,a);c(i).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&c(document.body).children().off("mouseover",null,c.noop),t[n].setAttribute("aria-expanded","false"),c(s).removeClass(g),c(i).removeClass(g).trigger(c.Event(h.HIDDEN,a)))}}}},u._getParentFromElement=function(e){var t,n=a.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},u._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||c(e.target).closest(E).length)):l.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!c(this).hasClass(d))){var t=u._getParentFromElement(this),n=c(t).hasClass(g);if(n&&(!n||27!==e.which&&32!==e.which)){var r=[].slice.call(t.querySelectorAll(w));if(0!==r.length){var i=r.indexOf(e.target);38===e.which&&0<i&&i--,40===e.which&&i<r.length-1&&i++,i<0&&(i=0),r[i].focus()}}else{if(27===e.which){var o=t.querySelector(C);c(o).trigger("focus")}c(this).trigger("click")}}},function(e,t,n){t&&r(e.prototype,t),n&&r(e,n)}(u,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return S}},{key:"DefaultType",get:function(){return j}}]),u}();return c(document).on(h.KEYDOWN_DATA_API,C,N._dataApiKeydownHandler).on(h.KEYDOWN_DATA_API,E,N._dataApiKeydownHandler).on(h.CLICK_DATA_API+" "+h.KEYUP_DATA_API,N._clearMenus).on(h.CLICK_DATA_API,C,function(e){e.preventDefault(),e.stopPropagation(),N._jQueryInterface.call(c(this),"toggle")}).on(h.CLICK_DATA_API,u,function(e){e.stopPropagation()}),c.fn[t]=N._jQueryInterface,c.fn[t].Constructor=N,c.fn[t].noConflict=function(){return c.fn[t]=s,N._jQueryInterface},N});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
