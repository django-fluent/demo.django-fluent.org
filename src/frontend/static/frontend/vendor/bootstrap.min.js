!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):(e=e||self).Util=t(e.jQuery)}(this,function(o){"use strict";o=o&&o.hasOwnProperty("default")?o.default:o;var t="transitionend";function e(e){var t=this,n=!1;return o(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(t)},e),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var n=e.getAttribute("href");t=n&&"#"!==n?n.trim():""}try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=o(e).css("transition-duration"),n=o(e).css("transition-delay"),r=parseFloat(t),i=parseFloat(n);return r||i?(t=t.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(t)+parseFloat(n))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){o(e).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=t[r],s=o&&l.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(s))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+s+'" but expected type "'+i+'".')}var a},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"!=typeof e.getRootNode)return e instanceof ShadowRoot?e:e.parentNode?l.findShadowRoot(e.parentNode):null;var t=e.getRootNode();return t instanceof ShadowRoot?t:null},jQueryDetection:function(){if(void 0===o)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=o.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||4<=e[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};return l.jQueryDetection(),o.fn.emulateTransitionEnd=e,o.event.special[l.TRANSITION_END]={bindType:t,delegateType:t,handle:function(e){if(o(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},l}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):(e=e||self).Collapse=t(e.jQuery,e.Util)}(this,function(l,u){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function o(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach(function(e){Object.defineProperty(i,e,Object.getOwnPropertyDescriptor(o,e))})}return i}l=l&&l.hasOwnProperty("default")?l.default:l,u=u&&u.hasOwnProperty("default")?u.default:u;var s="collapse",c="bs.collapse",e="."+c,n=l.fn[s],f={toggle:!0,parent:""},h={toggle:"boolean",parent:"(string|element)"},p={SHOW:"show"+e,SHOWN:"shown"+e,HIDE:"hide"+e,HIDDEN:"hidden"+e,CLICK_DATA_API:"click"+e+".data-api"},d="show",g="collapse",_="collapsing",m="collapsed",y="width",v="height",b=".show, .collapsing",w='[data-toggle="collapse"]',a=function(){function a(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(w)),r=0,i=n.length;r<i;r++){var o=n[r],s=u.getSelectorFromElement(o),a=[].slice.call(document.querySelectorAll(s)).filter(function(e){return e===t});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e,t,n,r=a.prototype;return r.toggle=function(){l(this._element).hasClass(d)?this.hide():this.show()},r.show=function(){var e,t,n=this;if(!this._isTransitioning&&!l(this._element).hasClass(d)&&(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(b)).filter(function(e){return"string"==typeof n._config.parent?e.getAttribute("data-parent")===n._config.parent:e.classList.contains(g)})).length&&(e=null),!(e&&(t=l(e).not(this._selector).data(c))&&t._isTransitioning))){var r=l.Event(p.SHOW);if(l(this._element).trigger(r),!r.isDefaultPrevented()){e&&(a._jQueryInterface.call(l(e).not(this._selector),"hide"),t||l(e).data(c,null));var i=this._getDimension();l(this._element).removeClass(g).addClass(_),this._element.style[i]=0,this._triggerArray.length&&l(this._triggerArray).removeClass(m).attr("aria-expanded",!0),this.setTransitioning(!0);var o="scroll"+(i[0].toUpperCase()+i.slice(1)),s=u.getTransitionDurationFromElement(this._element);l(this._element).one(u.TRANSITION_END,function(){l(n._element).removeClass(_).addClass(g).addClass(d),n._element.style[i]="",n.setTransitioning(!1),l(n._element).trigger(p.SHOWN)}).emulateTransitionEnd(s),this._element.style[i]=this._element[o]+"px"}}},r.hide=function(){var e=this;if(!this._isTransitioning&&l(this._element).hasClass(d)){var t=l.Event(p.HIDE);if(l(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",u.reflow(this._element),l(this._element).addClass(_).removeClass(g).removeClass(d);var r=this._triggerArray.length;if(0<r)for(var i=0;i<r;i++){var o=this._triggerArray[i],s=u.getSelectorFromElement(o);if(null!==s)l([].slice.call(document.querySelectorAll(s))).hasClass(d)||l(o).addClass(m).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[n]="";var a=u.getTransitionDurationFromElement(this._element);l(this._element).one(u.TRANSITION_END,function(){e.setTransitioning(!1),l(e._element).removeClass(_).addClass(g).trigger(p.HIDDEN)}).emulateTransitionEnd(a)}}},r.setTransitioning=function(e){this._isTransitioning=e},r.dispose=function(){l.removeData(this._element,c),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},r._getConfig=function(e){return(e=o({},f,{},e)).toggle=Boolean(e.toggle),u.typeCheckConfig(s,e,h),e},r._getDimension=function(){return l(this._element).hasClass(y)?y:v},r._getParent=function(){var e,n=this;u.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var t='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',r=[].slice.call(e.querySelectorAll(t));return l(r).each(function(e,t){n._addAriaAndCollapsedClass(a._getTargetFromElement(t),[t])}),e},r._addAriaAndCollapsedClass=function(e,t){var n=l(e).hasClass(d);t.length&&l(t).toggleClass(m,!n).attr("aria-expanded",n)},a._getTargetFromElement=function(e){var t=u.getSelectorFromElement(e);return t?document.querySelector(t):null},a._jQueryInterface=function(r){return this.each(function(){var e=l(this),t=e.data(c),n=o({},f,{},e.data(),{},"object"==typeof r&&r?r:{});if(!t&&n.toggle&&/show|hide/.test(r)&&(n.toggle=!1),t||(t=new a(this,n),e.data(c,t)),"string"==typeof r){if(void 0===t[r])throw new TypeError('No method named "'+r+'"');t[r]()}})},e=a,n=[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return f}}],(t=null)&&i(e.prototype,t),n&&i(e,n),a}();return l(document).on(p.CLICK_DATA_API,w,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=l(this),t=u.getSelectorFromElement(this),r=[].slice.call(document.querySelectorAll(t));l(r).each(function(){var e=l(this),t=e.data(c)?"toggle":n.data();a._jQueryInterface.call(e,t)})}),l.fn[s]=a._jQueryInterface,l.fn[s].Constructor=a,l.fn[s].noConflict=function(){return l.fn[s]=n,a._jQueryInterface},a}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],t):(e=e||self).Dropdown=t(e.jQuery,e.Popper,e.Util)}(this,function(c,o,s){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function a(i){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach(function(e){var t,n,r;t=i,r=o[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach(function(e){Object.defineProperty(i,e,Object.getOwnPropertyDescriptor(o,e))})}return i}c=c&&c.hasOwnProperty("default")?c.default:c,o=o&&o.hasOwnProperty("default")?o.default:o,s=s&&s.hasOwnProperty("default")?s.default:s;var l="dropdown",f="bs.dropdown",h="."+f,e=".data-api",n=c.fn[l],p=new RegExp("38|40|27"),d={HIDE:"hide"+h,HIDDEN:"hidden"+h,SHOW:"show"+h,SHOWN:"shown"+h,CLICK:"click"+h,CLICK_DATA_API:"click"+h+e,KEYDOWN_DATA_API:"keydown"+h+e,KEYUP_DATA_API:"keyup"+h+e},g="disabled",_="show",m="dropup",y="dropright",v="dropleft",b="dropdown-menu-right",w="position-static",C='[data-toggle="dropdown"]',r=".dropdown form",E=".dropdown-menu",A=".navbar-nav",O=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",j="top-start",D="top-end",P="bottom-start",T="bottom-end",I="right-start",S="left-start",N={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},q={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},u=function(){function u(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e,t,n,r=u.prototype;return r.toggle=function(){if(!this._element.disabled&&!c(this._element).hasClass(g)){var e=c(this._menu).hasClass(_);u._clearMenus(),e||this.show(!0)}},r.show=function(e){if(void 0===e&&(e=!1),!(this._element.disabled||c(this._element).hasClass(g)||c(this._menu).hasClass(_))){var t={relatedTarget:this._element},n=c.Event(d.SHOW,t),r=u._getParentFromElement(this._element);if(c(r).trigger(n),!n.isDefaultPrevented()){if(!this._inNavbar&&e){if(void 0===o)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var i=this._element;"parent"===this._config.reference?i=r:s.isElement(this._config.reference)&&(i=this._config.reference,void 0!==this._config.reference.jquery&&(i=this._config.reference[0])),"scrollParent"!==this._config.boundary&&c(r).addClass(w),this._popper=new o(i,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===c(r).closest(A).length&&c(document.body).children().on("mouseover",null,c.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),c(this._menu).toggleClass(_),c(r).toggleClass(_).trigger(c.Event(d.SHOWN,t))}}},r.hide=function(){if(!this._element.disabled&&!c(this._element).hasClass(g)&&c(this._menu).hasClass(_)){var e={relatedTarget:this._element},t=c.Event(d.HIDE,e),n=u._getParentFromElement(this._element);c(n).trigger(t),t.isDefaultPrevented()||(this._popper&&this._popper.destroy(),c(this._menu).toggleClass(_),c(n).toggleClass(_).trigger(c.Event(d.HIDDEN,e)))}},r.dispose=function(){c.removeData(this._element,f),c(this._element).off(h),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},r.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},r._addEventListeners=function(){var t=this;c(this._element).on(d.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},r._getConfig=function(e){return e=a({},this.constructor.Default,{},c(this._element).data(),{},e),s.typeCheckConfig(l,e,this.constructor.DefaultType),e},r._getMenuElement=function(){if(!this._menu){var e=u._getParentFromElement(this._element);e&&(this._menu=e.querySelector(E))}return this._menu},r._getPlacement=function(){var e=c(this._element.parentNode),t=P;return e.hasClass(m)?(t=j,c(this._menu).hasClass(b)&&(t=D)):e.hasClass(y)?t=I:e.hasClass(v)?t=S:c(this._menu).hasClass(b)&&(t=T),t},r._detectNavbar=function(){return 0<c(this._element).closest(".navbar").length},r._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,{},t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},r._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),a({},e,{},this._config.popperConfig)},u._jQueryInterface=function(t){return this.each(function(){var e=c(this).data(f);if(e||(e=new u(this,"object"==typeof t?t:null),c(this).data(f,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},u._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var t=[].slice.call(document.querySelectorAll(C)),n=0,r=t.length;n<r;n++){var i=u._getParentFromElement(t[n]),o=c(t[n]).data(f),s={relatedTarget:t[n]};if(e&&"click"===e.type&&(s.clickEvent=e),o){var a=o._menu;if(c(i).hasClass(_)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&c.contains(i,e.target))){var l=c.Event(d.HIDE,s);c(i).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&c(document.body).children().off("mouseover",null,c.noop),t[n].setAttribute("aria-expanded","false"),o._popper&&o._popper.destroy(),c(a).removeClass(_),c(i).removeClass(_).trigger(c.Event(d.HIDDEN,s)))}}}},u._getParentFromElement=function(e){var t,n=s.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},u._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||c(e.target).closest(E).length)):p.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!c(this).hasClass(g))){var t=u._getParentFromElement(this),n=c(t).hasClass(_);if(n||27!==e.which)if(n&&(!n||27!==e.which&&32!==e.which)){var r=[].slice.call(t.querySelectorAll(O)).filter(function(e){return c(e).is(":visible")});if(0!==r.length){var i=r.indexOf(e.target);38===e.which&&0<i&&i--,40===e.which&&i<r.length-1&&i++,i<0&&(i=0),r[i].focus()}}else{if(27===e.which){var o=t.querySelector(C);c(o).trigger("focus")}c(this).trigger("click")}}},e=u,n=[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return N}},{key:"DefaultType",get:function(){return q}}],(t=null)&&i(e.prototype,t),n&&i(e,n),u}();return c(document).on(d.KEYDOWN_DATA_API,C,u._dataApiKeydownHandler).on(d.KEYDOWN_DATA_API,E,u._dataApiKeydownHandler).on(d.CLICK_DATA_API+" "+d.KEYUP_DATA_API,u._clearMenus).on(d.CLICK_DATA_API,C,function(e){e.preventDefault(),e.stopPropagation(),u._jQueryInterface.call(c(this),"toggle")}).on(d.CLICK_DATA_API,r,function(e){e.stopPropagation()}),c.fn[l]=u._jQueryInterface,c.fn[l].Constructor=u,c.fn[l].noConflict=function(){return c.fn[l]=n,u._jQueryInterface},u});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
