#!/bin/sh
set -e

RELEASE_NAME="$1"
CI_ENVIRONMENT_URL="${2:-$CI_ENVIRONMENT_URL}"
CI_COMMIT_SHA="${CI_COMMIT_SHA:-$(git rev-parse HEAD)}"
TILLER_NAMESPACE=${TILLER_NAMESPACE:-$KUBE_NAMESPACE}
CHECK_URL="$(echo $CI_ENVIRONMENT_URL | sed -e 's/\/$//')/api/health/"

if [ -z "$RELEASE_NAME" -o -z "$CI_ENVIRONMENT_URL" ]; then
  echo "Usage: $0 release-name \$CI_ENVIRONMENT_URL" >&2
  exit 1
fi

echo "Checking status at $CHECK_URL"
echo "Found: $(curl -sL $CHECK_URL)"
echo -n "Waiting for release"

# Avoid bad cluster state on aborts
function on_exit() {
  err=$?
  if [ "$err" != "0" ]; then
    # Make sure the state is reverted to the last working deployment,
    # so the cluster doesn't continue trying to deploy a broken release.
    echo "Performing rollback"
    helm rollback --tiller-namespace=$TILLER_NAMESPACE $RELEASE_NAME 0
  fi
  exit $err
}
trap on_exit EXIT INT TERM

# For the next 2 minutes, see if a release can be found
for i in `seq 1 120`; do
    output=`curl -sL $CHECK_URL`
    if echo $output | grep -q "@$CI_COMMIT_SHA\""; then
      echo
      echo "Successfully deployed ${GIT_VERSION:-$CI_COMMIT_SHA} to $CI_ENVIRONMENT_URL"
      exit 0
    fi
    echo -n "."
    sleep 1
done

# Release failed.
echo
echo "Release is not online yet!" >&2
helm status --tiller-namespace=$TILLER_NAMESPACE $RELEASE_NAME
exit 1
